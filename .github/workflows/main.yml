name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches:
      - master
      - 'feature/**'
  schedule:
    - cron: '0 0 * * 0'

jobs:
  build-rpm:
    strategy:
      matrix:
        container-image: ['fedora:35', 'fedora:36', 'opensuse/tumbleweed:latest', 'mageia:8']
        compiler: [gcc]
        include:
        - container-image: 'fedora:35'
          compiler: clang
        - container-image: 'fedora:36'
          compiler: clang

    runs-on: ubuntu-latest
    container: ${{ matrix.container-image }}

    steps:
    - name: Set packages install command for dnf
      if: startsWith(matrix.container-image, 'fedora') || startsWith(matrix.container-image, 'mageia')
      run: echo 'INSTALL_PACKAGES=dnf -y --setopt=install_weak_deps=False install' >> "$GITHUB_ENV"

    - name: Set packages install command for zypper
      if: startsWith(matrix.container-image, 'opensuse')
      run: echo 'INSTALL_PACKAGES=zypper --non-interactive in --no-recommends' >> "$GITHUB_ENV"

    - name: Set up environment
      run: ${{env.INSTALL_PACKAGES}} git rpm-build

    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: 'true'

    - name: Set Fedora compiler RPM macro
      id: fedora-compiler
      if: startsWith(matrix.container-image, 'fedora')
      run: echo "::set-output name=rpm-macro::--define 'toolchain ${{ matrix.compiler }}'"

    - name: Install build dependencies
      run: ${{env.INSTALL_PACKAGES}} $(rpmspec ${{steps.fedora-compiler.outputs.rpm-macro}} -q --srpm --qf '[%{REQUIRES} ]' rpm/tremotesf.spec)

    - name: Add GCC problem matcher
      uses: ammaraskar/gcc-problem-matcher@master

    - name: Build Tremotesf
      run: rpmbuild ${{steps.fedora-compiler.outputs.rpm-macro}} -bb --build-in-place rpm/tremotesf.spec

  build-debian-ubuntu:
    strategy:
      matrix:
        container-image: ['debian:11', 'ubuntu:22.04']
        compiler: [gcc, clang]

    runs-on: ubuntu-latest
    container: ${{ matrix.container-image }}

    steps:
    - name: Install packages
      run: apt-get update && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends --assume-yes install ca-certificates git cmake ninja-build qtbase5-dev libqt5x11extras5-dev qttools5-dev libfmt-dev libkf5widgetsaddons-dev libkf5windowsystem-dev gettext ${{ matrix.compiler == 'gcc' && 'g++' || 'clang' }}

    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: 'true'

    - name: Add GCC problem matcher
      uses: ammaraskar/gcc-problem-matcher@master

    - name: Build Tremotesf
      uses: equeim/action-cmake-build@v9
      with:
        # Can't use presets on Debian, CMake is too old
        cmake-arguments: -D CMAKE_CXX_COMPILER=${{ matrix.compiler == 'gcc' && 'g++' || 'clang++' }}

  build-flatpak:
    runs-on: ubuntu-latest

    steps:
    - name: Set up Flatpak
      run: |
        sudo add-apt-repository -y ppa:flatpak/stable
        sudo apt-get update && sudo DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends --assume-yes install flatpak flatpak-builder elfutils
        flatpak remote-add --user --if-not-exists flathub 'https://flathub.org/repo/flathub.flatpakrepo'

    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: 'true'

    - name: Add GCC problem matcher
      uses: ammaraskar/gcc-problem-matcher@master

    - name: Build Tremotesf
      run: |
        flatpak-builder --user --install-deps-from=flathub build-dir org.equeim.Tremotesf.json

  build-windows:
    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: 'true'

    - name: Set up MSVC environment
      uses: equeim/action-setup-msvc-environment@v1

    - name: Set up vcpkg
      uses: equeim/action-setup-vcpkg@v3
      with:
        run-install: true
        triplet: x64-windows-static
        save-cache: ${{ github.event_name == 'push' }}

    # We don't use matrix here because we want for vcpkg to install dependencies only once

    - name: Build Tremotesf with clang-cl
      id: clang-cl-build
      uses: equeim/action-cmake-build@v9
      with:
        cmake-arguments: --preset windows -D VCPKG_MANIFEST_INSTALL=OFF -D VCPKG_INSTALLED_DIR=${{github.workspace}}\vcpkg_installed -D CMAKE_CXX_COMPILER=clang-cl
        output-directories-suffix: -clang-cl

    - name: Remove clang-cl build directories
      run: |
        Remove-Item ${{ steps.clang-cl-build.outputs.build-directory-debug }} -Recurse
        Remove-Item ${{ steps.clang-cl-build.outputs.build-directory-release }} -Recurse

    - name: Build Tremotesf with MSVC
      id: build
      uses: equeim/action-cmake-build@v9
      with:
        cmake-arguments: --preset windows -D VCPKG_MANIFEST_INSTALL=OFF -D VCPKG_INSTALLED_DIR=${{github.workspace}}\vcpkg_installed
        package: true

    - name: Archive debug packages
      uses: actions/upload-artifact@v3
      with:
        name: tremotesf-win64-debug
        retention-days: ${{ github.event_name == 'push' && github.retention_days || 3 }}
        path: |
          ${{ steps.build.outputs.build-directory-debug }}\packaging\*.zip
          ${{ steps.build.outputs.build-directory-debug }}\packaging\*.msi

    - name: Archive release packages
      uses: actions/upload-artifact@v3
      with:
        name: tremotesf-win64-release
        retention-days: ${{ github.event_name == 'push' && github.retention_days || 3 }}
        path: |
          ${{ steps.build.outputs.build-directory-release }}\packaging\*.zip
          ${{ steps.build.outputs.build-directory-release }}\packaging\*.msi

    - name: Archive vcpkg logs
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: vcpkg-logs
        retention-days: ${{ github.event_name == 'push' && github.retention_days || 3 }}
        path: |
          ${{env.VCPKG_ROOT}}\buildtrees\*\*.log

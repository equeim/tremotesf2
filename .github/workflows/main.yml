# SPDX-FileCopyrightText: 2015-2022 Alexey Rochev
#
# SPDX-License-Identifier: CC0-1.0

name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches:
      - master
      - 'feature/**'
  schedule:
    - cron: '0 0 * * 0'

jobs:
  build-rpm:
    strategy:
      matrix:
        container-image: ['fedora:36', 'fedora:37', 'opensuse/tumbleweed:latest', 'mageia:8']
        compiler: [gcc]
        include:
        - container-image: 'fedora:36'
          compiler: clang
        - container-image: 'fedora:37'
          compiler: clang

    runs-on: ubuntu-latest
    container: ${{ matrix.container-image }}

    steps:
    - name: Set packages install command for dnf
      if: startsWith(matrix.container-image, 'fedora') || startsWith(matrix.container-image, 'mageia')
      run: echo 'INSTALL_PACKAGES=dnf -y --setopt=install_weak_deps=False install' >> "$GITHUB_ENV"

    - name: Set packages install command for zypper
      if: startsWith(matrix.container-image, 'opensuse')
      run: echo 'INSTALL_PACKAGES=zypper --non-interactive in --no-recommends' >> "$GITHUB_ENV"

    - name: Set up environment
      run: ${{env.INSTALL_PACKAGES}} git rpm-build

    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: 'true'

    - name: Set Fedora compiler RPM macro
      id: fedora-compiler
      if: startsWith(matrix.container-image, 'fedora')
      run: echo "rpm-macro=--define 'toolchain ${{ matrix.compiler }}'" >> "$GITHUB_OUTPUT"

    - name: Install build dependencies
      run: ${{env.INSTALL_PACKAGES}} $(rpmspec ${{steps.fedora-compiler.outputs.rpm-macro}} -q --srpm --qf '[%{REQUIRES} ]' rpm/tremotesf.spec)

    - name: Make source archive
      run: |
        # Git complains if we don't do that
        git config --global --add safe.directory "$GITHUB_WORKSPACE"
        source_archive="$(.github/workflows/make-source-archive.py gzip)"
        sourcedir="$(rpmbuild --eval '%_sourcedir')"
        mkdir -p "$sourcedir"
        mv "$source_archive" "$sourcedir"

    - name: Add GCC problem matcher
      uses: ammaraskar/gcc-problem-matcher@master

    - name: Build RPM
      run: rpmbuild ${{steps.fedora-compiler.outputs.rpm-macro}} -bb rpm/tremotesf.spec

  build-debian-ubuntu:
    strategy:
      matrix:
        container-image: ['debian:11', 'ubuntu:22.04', 'ubuntu:22.10']
        compiler: [gcc, clang]

    runs-on: ubuntu-latest
    container: ${{ matrix.container-image }}

    steps:
    - name: Install packages
      run: apt-get update && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends --assume-yes install ca-certificates git cmake ninja-build qtbase5-dev libqt5x11extras5-dev qttools5-dev libfmt-dev libkf5widgetsaddons-dev libkf5windowsystem-dev gettext ${{ matrix.compiler == 'gcc' && 'g++' || 'clang' }}

    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: 'true'

    - name: Add GCC problem matcher
      uses: ammaraskar/gcc-problem-matcher@master

    - name: Build Tremotesf
      uses: equeim/action-cmake-build@v9
      with:
        # Can't use presets on Debian, CMake is too old
        cmake-arguments: -D CMAKE_CXX_COMPILER=${{ matrix.compiler == 'gcc' && 'g++' || 'clang++' }}

  build-flatpak:
    runs-on: ubuntu-latest

    steps:
    - name: Set up Flatpak
      run: |
        sudo add-apt-repository -y ppa:flatpak/stable
        sudo apt-get update && sudo DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends --assume-yes install flatpak flatpak-builder elfutils
        flatpak remote-add --user --if-not-exists flathub 'https://flathub.org/repo/flathub.flatpakrepo'

    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: 'true'

    - name: Add GCC problem matcher
      uses: ammaraskar/gcc-problem-matcher@master

    - name: Build Tremotesf
      run: |
        flatpak-builder --user --install-deps-from=flathub build-dir org.equeim.Tremotesf.json

  build-windows:
    uses: ./.github/workflows/build-windows.yml

  reuse-lint:
    runs-on: ubuntu-22.04
    steps:
    - name: Check out
      uses: actions/checkout@v3

    - name: Check REUSE compliance
      run: |
        sudo apt-get update && sudo DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends --assume-yes install pipx
        pipx run reuse lint
